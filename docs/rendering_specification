the rendering process depends on the following structures:

- rendering step: 
  it specifies an operation that can be performed on a buffer.
  the structure is to be filled by the user with the following information:
    - the operation the rendering should perform on a single item of a generic buffer (supplied as a function pointer),
    - the number of items a single thread should process with the operation specified above,
    - the maximum number of threads to be launched,
    - generic arguments the operation might need, these usually depend on the nature of the operation.

- rendering sequence: 
  it contains a sequence of rendering steps, that can later be applied to a buffer in order.
  it can be either locked or unlocked.
  when the sequence is unlocked the user can push back rendering steps and alter it,
  but it cannot be applied to a buffer.
  when the sequence is locked it can no longer be edited but it can be applied to a buffer
  or eventually be compiled into an RSPIC structure.

- rendering sequence process information cache (RSPIC):
  this structure CAN (is not necessary) be used to speed up rendering times if the render
  is to be repeated multiple times on the same array. it contains all the info necessary to
  run every thread and every semaphore to apply a rendering sequence to a determined buffer.
  it is compiled by a specialized function that takes indicatively the target buffer and the desired rendering sequence.
  the generating functions returns a pointer to an RSPIC structure that can later be passed to a standard rendering function
  to speed it up.
  the RSPIC is generated by organizing thread interactions to have the best possible spatial and temporal complexity
  and saving the organized scheduling to the heap. this calculation is usually done once every rendering if the rendering
  function is not supplied with a handle to an RSPIC structure.

setting up the rendering process should go something like this (in pseudocode):

  buffer_handle myBuffer
  render_sequence_handle renderSequence
  render_step_handle renderSteps[...]
  RSPIC_handle renderSpecification

  for render_step_handle step in renderSteps:
    //set up render step
    ...
    //fill renderSequence
    renderSequence.push_back(step)
  
  //lock sequence so that it can be applied
  renderSequence.lock()
  //generate RSPIC from renderSequence with target myBuffer
  renderSpecification = generateRSPIC(renderSequence, myBuffer)
  //render renderSequence to myBuffer using renderSpecification (RSPIC)
  render(renderSequence, myBuffer, renderSpecification)

  

